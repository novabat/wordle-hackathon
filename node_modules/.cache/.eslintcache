[{"/Users/adityaravishankar/Documents/hackathon/Wordle/src/index.tsx":"1","/Users/adityaravishankar/Documents/hackathon/Wordle/src/reportWebVitals.ts":"2","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game/game.tsx":"3","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/header/header.tsx":"4","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx":"5","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/modal/modal.tsx":"6","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx":"7","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/keyboard/keyboard.tsx":"8","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/svg-icons/svg-icons.tsx":"9","/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/global.tsx":"10","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-tile/game-tile.tsx":"11","/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/game-words.tsx":"12","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-helper.tsx":"13","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/key/key.tsx":"14","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/start-modal/modal.tsx":"15","/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/game-page.tsx":"16","/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/home-page.tsx":"17","/Users/adityaravishankar/Documents/hackathon/Wordle/src/constants.tsx":"18"},{"size":499,"mtime":1646379008825,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1646302067898,"results":"21","hashOfConfig":"20"},{"size":1917,"mtime":1646378871818,"results":"22","hashOfConfig":"20"},{"size":581,"mtime":1646302067896,"results":"23","hashOfConfig":"20"},{"size":1685,"mtime":1646485928857,"results":"24","hashOfConfig":"20"},{"size":811,"mtime":1646374084890,"results":"25","hashOfConfig":"20"},{"size":6638,"mtime":1646486622131,"results":"26","hashOfConfig":"20"},{"size":1761,"mtime":1646303115985,"results":"27","hashOfConfig":"20"},{"size":525,"mtime":1646374101279,"results":"28","hashOfConfig":"20"},{"size":1452,"mtime":1646369489197,"results":"29","hashOfConfig":"20"},{"size":415,"mtime":1646302067895,"results":"30","hashOfConfig":"20"},{"size":25495,"mtime":1646302067897,"results":"31","hashOfConfig":"20"},{"size":1125,"mtime":1646302067894,"results":"32","hashOfConfig":"20"},{"size":938,"mtime":1646302067896,"results":"33","hashOfConfig":"20"},{"size":834,"mtime":1646377157493,"results":"34","hashOfConfig":"20"},{"size":563,"mtime":1646484441503,"results":"35","hashOfConfig":"20"},{"size":2086,"mtime":1646395039779,"results":"36","hashOfConfig":"20"},{"size":885,"mtime":1646484903793,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1p12xmo",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adityaravishankar/Documents/hackathon/Wordle/src/index.tsx",[],["78","79"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/reportWebVitals.ts",[],["80","81"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game/game.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/header/header.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/modal/modal.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx",["82"],"import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../../pages/game-page\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(KEY_STATE.EMPTY)\n  );\n  const [guessedWords, setGuessedWords]: Array<any> =\n    useState(initialGuessedWords);\n  const [states, setStates]: any = useState(initialStates);\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [selectedLetters, setSelectedLetters] = useState<any>([]);\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      setGuessedWords(cookies.guessedWords);\n      setStates(cookies.states);\n      setSelectedLetters(cookies.selectedLetters);\n      updateGameData({...gameData,currentStep:cookies.currentStep})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      if (isEvent(event)) {\n        guessedWords[currentStep][number] = event.key.toLowerCase();\n      } else {\n        guessedWords[currentStep][number] = event.toLowerCase();\n      }\n      states[currentStep][number] = KEY_STATE.TBD;\n      setGuessedWords(guessedWords);\n      setStates(states);\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                selectedLetters,\n                \"letter\",\n                guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            states[currentStep][i] = keyState;\n            selectedLetters.push({\n              letter: guessedWords[currentStep][i],\n              state: keyState,\n            });\n            setStates(states);\n            setSelectedLetters(selectedLetters);\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(states));\n          setCookie(\"guessedWords\", JSON.stringify(guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      console.log(states)\n      states[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWords[currentStep][number - 1] = null;\n      setStates(states);\n      setGuessedWords(guessedWords);\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    states,\n    animations,\n    tryStates,\n    guessedWords,\n    message,\n    selectedLetters,\n  };\n};\nexport default useGameRowHook;\n","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/keyboard/keyboard.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/svg-icons/svg-icons.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/global.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-tile/game-tile.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/game-words.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-helper.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/key/key.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/start-modal/modal.tsx",[],["83","84"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/game-page.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/home-page.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/constants.tsx",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"85","replacedBy":"89"},{"ruleId":"87","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":75,"column":6,"nodeType":"93","endLine":75,"endColumn":8,"suggestions":"94"},{"ruleId":"85","replacedBy":"95"},{"ruleId":"87","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],["97"],["98"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies.animations', 'cookies.currentStep', 'cookies.gameOver', 'cookies.guessedWords', 'cookies.index', 'cookies.number', 'cookies.selectedLetters', 'cookies.states', 'gameData', 'index', and 'updateGameData'. Either include them or remove the dependency array.","ArrayExpression",["99"],["97"],["98"],"no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [cookies.animations, cookies.currentStep, cookies.gameOver, cookies.guessedWords, cookies.index, cookies.number, cookies.selectedLetters, cookies.states, gameData, index, updateGameData]",{"range":"102","text":"103"},[2371,2373],"[cookies.animations, cookies.currentStep, cookies.gameOver, cookies.guessedWords, cookies.index, cookies.number, cookies.selectedLetters, cookies.states, gameData, index, updateGameData]"]