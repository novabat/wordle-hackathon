[{"/Users/adityaravishankar/Documents/hackathon/Wordle/src/index.tsx":"1","/Users/adityaravishankar/Documents/hackathon/Wordle/src/reportWebVitals.ts":"2","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game/game.tsx":"3","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/header/header.tsx":"4","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx":"5","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/modal/modal.tsx":"6","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx":"7","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/keyboard/keyboard.tsx":"8","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/svg-icons/svg-icons.tsx":"9","/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/global.tsx":"10","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-tile/game-tile.tsx":"11","/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/game-words.tsx":"12","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-helper.tsx":"13","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/key/key.tsx":"14","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/start-modal/modal.tsx":"15","/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/game-page.tsx":"16","/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/home-page.tsx":"17","/Users/adityaravishankar/Documents/hackathon/Wordle/src/constants.tsx":"18","/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/main.tsx":"19"},{"size":646,"mtime":1646561777362,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1646302067898,"results":"22","hashOfConfig":"21"},{"size":1915,"mtime":1646550594762,"results":"23","hashOfConfig":"21"},{"size":581,"mtime":1646302067896,"results":"24","hashOfConfig":"21"},{"size":1817,"mtime":1646562659633,"results":"25","hashOfConfig":"21"},{"size":811,"mtime":1646374084890,"results":"26","hashOfConfig":"21"},{"size":7438,"mtime":1646631720524,"results":"27","hashOfConfig":"21"},{"size":1761,"mtime":1646303115985,"results":"28","hashOfConfig":"21"},{"size":525,"mtime":1646374101279,"results":"29","hashOfConfig":"21"},{"size":1452,"mtime":1646369489197,"results":"30","hashOfConfig":"21"},{"size":415,"mtime":1646302067895,"results":"31","hashOfConfig":"21"},{"size":25495,"mtime":1646302067897,"results":"32","hashOfConfig":"21"},{"size":1125,"mtime":1646302067894,"results":"33","hashOfConfig":"21"},{"size":938,"mtime":1646302067896,"results":"34","hashOfConfig":"21"},{"size":834,"mtime":1646377157493,"results":"35","hashOfConfig":"21"},{"size":129,"mtime":1646559669107,"results":"36","hashOfConfig":"21"},{"size":4317,"mtime":1646631919668,"results":"37","hashOfConfig":"21"},{"size":967,"mtime":1646631565024,"results":"38","hashOfConfig":"21"},{"size":743,"mtime":1646631539375,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1p12xmo",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"/Users/adityaravishankar/Documents/hackathon/Wordle/src/index.tsx",[],["85","86"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/reportWebVitals.ts",[],["87","88"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game/game.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/header/header.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx",["89"],"import GameTile from \"../game-tile/game-tile\";\nimport { SETTING } from \"../../global/global\";\nimport KeyBoard from \"../keyboard/keyboard\";\nimport \"./game-row.scss\";\nimport useGameRowHook from \"./game-row-hook\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { GameContext } from \"../..\";\n\nconst GameRow = () => {\n  const {gameData} = useContext(GameContext)\n  const {states, guessedWords,selectedLetters} = gameData\n  const {wordLength} = gameData\n  const {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message,\n  } = useGameRowHook();\n\n  const ref: any = useRef(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n  });\n  var rows = []\n  if(states.length && guessedWords.length){\n    for (var i = 0; i < SETTING.COUNT_OF_TRY; i++) {\n      var tile = [];\n      for (var j = 0; j < wordLength; j++) {\n        tile.push(\n          <GameTile\n            state={states[i][j]}\n            content={guessedWords[i][j]}\n            animation={animations[i][j]}\n          />\n        );\n      }\n      rows.push(\n        <div className=\"row\" data-state={tryStates[i]}>\n          {tile}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div style={{display: \"flex\", flexDirection: \"column\"}} onKeyDown={onKeyPressed} tabIndex={0} ref={ref}>\n      <div id=\"board-container\">\n        <div id=\"board\">{rows}</div>\n        {message ? (\n          <div className=\"notification\" id=\"game-notification\">\n            {message}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <KeyBoard\n        selectedLetters={selectedLetters}\n        pressVirualKeyBoard={pressLetter}\n        pressEnter={pressEnter}\n        pressBackspace={pressBackspace}\n      />\n    </div>\n  );\n};\nexport default GameRow;\n","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/modal/modal.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx",["90","91"],"import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../..\";\nimport axios from \"axios\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(KEY_STATE.EMPTY)\n  );\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    console.log(gameData.wordLength)\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      updateGameData({...gameData,currentStep:cookies.currentStep,guessedWords:cookies.guessedWords,states:cookies.states,selectedLetters:cookies.selectedLetters})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n    else{\n      updateGameData({...gameData, states:initialStates,guessedWords: initialGuessedWords});\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      }\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({...gameData,guessedWords:guessedWordsNew,states:statesNew})\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = async() => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        // const payload = {userId: gameData.userId,wordEntered:gameData.guessedWords[currentStep].join(\"\"),currentStep:gameData.currentStep}\n        // const response = await axios.post('https://wordle-bfhl.herokuapp.com/ingame/gameAttempt',payload)\n        // if(response.data){\n        //   if(response.data.isWordValid){\n            \n        //   }\n          \n        // }\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                gameData.selectedLetters,\n                \"letter\",\n                gameData.guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            let statesNew = gameData.states\n            let selectedLettersNew = gameData.selectedLetters\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState,\n            });\n            updateGameData({...gameData, states:statesNew, selectedLetters:selectedLettersNew})\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({...gameData,states:statesNew,guessedWords:guessedWordsNew })\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\nexport default useGameRowHook;\n","/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/keyboard/keyboard.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/svg-icons/svg-icons.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/global.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-tile/game-tile.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/global/game-words.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-helper.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/key/key.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/start-modal/modal.tsx",[],["92","93"],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/game-page.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/home-page.tsx",["94","95","96"],"import { useContext, useEffect, useState } from \"react\";\nimport Header from \"../components/header/header\";\nimport Modal from \"../components/modal/modal\";\nimport Slider from 'react-input-slider';\nimport \"./home-page.scss\";\nimport axios from \"axios\";\nimport { GameContext } from \"..\";\n\nconst HomePage = () =>{\n    const [showHelp, setShowHelp] = useState(false);\n    const {gameData,updateGameData} = useContext(GameContext);\n    const handleCloseHelp = () => {\n      setShowHelp(false);\n    };\n    const handleShowHelp = () => {\n      setShowHelp(true);\n    };\n    const [userName,setUserName] = useState(gameData.userId);\n    const [sliderX,setSliderX] = useState(4);\n    const [errorMessage,setErrorMessage] = useState(\"\")\n    const handleStartGameClick = async() =>{\n      // const payload = {userId: userName,wordLength: sliderX}\n      // const response = await axios.post(\"https://wordle-bfhl.herokuapp.com/registrar/startGame\",payload)\n      // if(response.data.isValidUserName){\n      updateGameData({...gameData,wordLength:sliderX,gameStart:true,userID:userName})\n      // }\n      // else{\n      //   setErrorMessage(\"This UserName is taken. Please enter another UserName\")\n      // }\n    }\n    const setBackgroundColor = () =>{\n      if(sliderX<=5)\n      return \"#81c784\"\n      else if(sliderX<=7)\n      return \"#FFC107\"\n      else\n      return 'red'\n    }\n    return(\n        <>\n        <div id=\"home-page\">\n          <Header handleShowModal={handleShowHelp} />\n          <div className=\"page-content\">\n          <div className=\"page-header\">\n          <h2>Welcome to BFHL Health Wordle!</h2>\n          <p>Play the viral Wordle game with a twist. The words you will be guessing will all be related to health.</p>\n          <h3>Enter a cool username.</h3>\n          <input value={userName} onChange={(e)=>{setUserName(e.target.value)}} type=\"text\" placeholder=\"Enter name\"></input>\n          <div style={{color:\"red\"}}>{errorMessage}</div>\n          </div>\n          <div>\n            <div className=\"page-header\">\n              <h2>It's Time To Play!!</h2>\n              <h3>Choose the length of the word you want to guess</h3>\n              <Slider styles={{active: {backgroundColor: setBackgroundColor()}}}\n              axis=\"x\" xmin={4} xmax={8} x={sliderX} onChange={({ x }) => setSliderX(x)}/>\n              <div className=\"difficulty-container\">\n                <div>Easy</div>\n                <div>Medium</div>\n                <div>Hard</div>\n              </div>\n              <h3>Word Length: {sliderX}</h3>\n              <div className=\"button-container\">\n              <button className=\"button\" type=\"button\" onClick={handleStartGameClick}>Start Game</button>\n              </div>\n            </div>\n          </div>\n          </div>\n          <Modal show={showHelp} handleClose={handleCloseHelp}>\n            <div style={{color: \"white\"}}>\n              <p>Welcome to BFHL Health Wordle. Guess words related to healthcare and get on the high score board. </p>\n              <hr />\n              <h2>Rules</h2>\n              <p>Select the word size you want to play with and start guessing!</p>\n              <h3>Examples</h3>\n              <div>\n              <div style={{height: \"50px\"}} className=\"row\">\n                <div className=\"tile\" data-state='correct'>Y</div>\n                <div className=\"tile\" data-state='absent'>Y</div>\n                <div className=\"tile\" data-state='absent'>Y</div>\n                <div className=\"tile\" data-state='absent'>Y</div>\n              </div>\n              <p>This means that Y is present in the word and is in the correct position and the other letters are not present in the word</p>\n              </div>\n              <div>\n              <div style={{height: \"50px\"}} className=\"row\">\n                <div className=\"tile\" data-state='absent'>Y</div>\n                <div className=\"tile\" data-state='present'>Y</div>\n                <div className=\"tile\" data-state='absent'>Y</div>\n                <div className=\"tile\" data-state='absent'>Y</div>\n              </div>\n              <p>This means that Y is present in the word but is not in the correct position and the other letters are not present in the word</p>\n              </div>\n    \n            </div>\n          </Modal>\n        </div>\n        </>\n    )\n}\nexport default HomePage;","/Users/adityaravishankar/Documents/hackathon/Wordle/src/constants.tsx",[],"/Users/adityaravishankar/Documents/hackathon/Wordle/src/pages/main.tsx",["97","98","99"],"import HomePage from \"./home-page\";\nimport GamePage from \"./game-page\";\nimport { GameContext } from \"..\";\nimport { useContext, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Main = () =>{\n    const {gameData,updateGameData} = useContext(GameContext);\n    // useEffect(() =>{\n    //     const getUserId = async() =>{\n    //       const response = await axios.get(\"https://wordle-bfhl.herokuapp.com/registrar/generateUserId\");\n    //       updateGameData({...gameData,userId:response.data.userId})\n    //     }\n    //     getUserId();\n    // },[])\n\n    if(gameData.userId && !gameData.gameStart){\n        return <HomePage />\n    }\n    if(gameData.gameStart){\n        return <GamePage />\n    }\n    return null;\n}\n\nexport default Main",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"100","replacedBy":"104"},{"ruleId":"102","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":6,"column":41,"nodeType":"108","messageId":"109","endLine":6,"endColumn":49},{"ruleId":"106","severity":1,"message":"110","line":20,"column":8,"nodeType":"108","messageId":"109","endLine":20,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":73,"column":6,"nodeType":"113","endLine":73,"endColumn":8,"suggestions":"114"},{"ruleId":"100","replacedBy":"115"},{"ruleId":"102","replacedBy":"116"},{"ruleId":"106","severity":1,"message":"117","line":1,"column":22,"nodeType":"108","messageId":"109","endLine":1,"endColumn":31},{"ruleId":"106","severity":1,"message":"110","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":13},{"ruleId":"106","severity":1,"message":"118","line":20,"column":25,"nodeType":"108","messageId":"109","endLine":20,"endColumn":40},{"ruleId":"106","severity":1,"message":"117","line":4,"column":22,"nodeType":"108","messageId":"109","endLine":4,"endColumn":31},{"ruleId":"106","severity":1,"message":"110","line":5,"column":8,"nodeType":"108","messageId":"109","endLine":5,"endColumn":13},{"ruleId":"106","severity":1,"message":"119","line":8,"column":21,"nodeType":"108","messageId":"109","endLine":8,"endColumn":35},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],["120"],["121"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies.animations', 'cookies.currentStep', 'cookies.gameOver', 'cookies.guessedWords', 'cookies.index', 'cookies.number', 'cookies.selectedLetters', 'cookies.states', 'gameData', 'index', 'initialGuessedWords', 'initialStates', and 'updateGameData'. Either include them or remove the dependency array.","ArrayExpression",["122"],["120"],["121"],"'useEffect' is defined but never used.","'setErrorMessage' is assigned a value but never used.","'updateGameData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [cookies.animations, cookies.currentStep, cookies.gameOver, cookies.guessedWords, cookies.index, cookies.number, cookies.selectedLetters, cookies.states, gameData, index, initialGuessedWords, initialStates, updateGameData]",{"range":"125","text":"126"},[2279,2281],"[cookies.animations, cookies.currentStep, cookies.gameOver, cookies.guessedWords, cookies.index, cookies.number, cookies.selectedLetters, cookies.states, gameData, index, initialGuessedWords, initialStates, updateGameData]"]