{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { ANIMATIONS, KEYBOARD, KEY_STATE, MESSAGE, SETTING } from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport { findDateDiff, isEvent, isValidChar, removeByAttr } from \"./game-row-helper\";\nimport { GameContext } from \"../../pages/game-page\";\n\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  _s();\n\n  const {\n    gameData,\n    updateGameData\n  } = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const [animations, setAnimations] = useState(Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null)));\n  const [tryStates, setTryStates] = useState(new Array(SETTING.COUNT_OF_TRY).fill(null));\n  const [number, setNumber] = useState(0);\n  const {\n    currentStep,\n    gameOver,\n    wordLength\n  } = gameData;\n  const [cookies, setCookie] = useCookies([\"index\", \"states\", \"guessedWords\", \"selectedLetters\", \"currentStep\", \"number\", \"gameOver\", \"animations\"]);\n  const [word, setWord] = useState(\"\");\n  const {\n    Difference_In_Days: index\n  } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n\n    if (cookies.guessedWords && cookies.states && cookies.selectedLetters && parseInt(cookies.index) === index) {\n      updateGameData({ ...gameData,\n        currentStep: cookies.currentStep,\n        guessedWords: cookies.guessedWords,\n        states: cookies.states,\n        selectedLetters: cookies.selectedLetters\n      });\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n\n      if (cookies.gameOver === 1) {\n        updateGameData({ ...gameData,\n          gameOver: true\n        });\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = function (content) {\n    let miniSec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = state => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = event => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      }\n\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({ ...gameData,\n        guessedWords: guessedWordsNew,\n        states: statesNew\n      });\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i = 0; i < wordLength; i++) {\n            let keyState;\n\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(gameData.selectedLetters, \"letter\", gameData.guessedWords[currentStep][i]);\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n\n            let statesNew = gameData.states;\n            let selectedLettersNew = gameData.selectedLetters;\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState\n            });\n            updateGameData({ ...gameData,\n              states: statesNew,\n              selectedLetters: selectedLettersNew\n            });\n          }\n\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n          }\n\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({ ...gameData,\n              currentStep: nextTry\n            });\n            setNumber(0);\n\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({ ...gameData,\n        states: statesNew,\n        guessedWords: guessedWordsNew\n      });\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = event => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\n\n_s(useGameRowHook, \"TWvWCX/3n8sqIV8NkaAVZlgPrFw=\", false, function () {\n  return [useCookies];\n});\n\nexport default useGameRowHook;","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx"],"names":["useContext","useEffect","useState","useCookies","ANIMATIONS","KEYBOARD","KEY_STATE","MESSAGE","SETTING","gameWords","findDateDiff","isEvent","isValidChar","removeByAttr","GameContext","words","require","useGameRowHook","gameData","updateGameData","message","setMessage","animations","setAnimations","Array","from","COUNT_OF_TRY","wordLength","fill","tryStates","setTryStates","number","setNumber","currentStep","gameOver","cookies","setCookie","word","setWord","Difference_In_Days","index","guessedWords","states","selectedLetters","parseInt","splitedWord","split","refreshMessage","content","miniSec","setTimeout","refreshStates","state","pressLetter","event","guessedWordsNew","key","toLowerCase","statesNew","TBD","pressEnter","NOT_ENOUGH_LETTER","includes","join","i","keyState","CORRECT","PRESENT","ABSENT","selectedLettersNew","push","letter","SCALE_CENTER","nextTry","INCORRECT","JSON","stringify","NOT_EXIST","pressBackspace","EMPTY","onKeyPressed","keyCode","BACKSPACE","ENTER","FINISH_GAME"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../../pages/game-page\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      updateGameData({...gameData,currentStep:cookies.currentStep,guessedWords:cookies.guessedWords,states:cookies.states,selectedLetters:cookies.selectedLetters})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      }\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({...gameData,guessedWords:guessedWordsNew,states:statesNew})\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                gameData.selectedLetters,\n                \"letter\",\n                gameData.guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            let statesNew = gameData.states\n            let selectedLettersNew = gameData.selectedLetters\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState,\n            });\n            updateGameData({...gameData, states:statesNew, selectedLetters:selectedLettersNew})\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({...gameData,states:statesNew,guessedWords:guessedWordsNew })\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\nexport default useGameRowHook;\n"]},"metadata":{},"sourceType":"module"}