{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { ANIMATIONS, KEYBOARD, KEY_STATE, MESSAGE, SETTING } from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport { findDateDiff, isEvent, isValidChar, removeByAttr } from \"./game-row-helper\";\nimport { GameContext } from \"../../pages/game-page\";\n\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  _s();\n\n  const {\n    gameData,\n    updateGameData\n  } = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null));\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(KEY_STATE.EMPTY));\n  updateGameData({ ...gameData,\n    states: initialStates,\n    guessedWords: initialGuessedWords\n  });\n  const [animations, setAnimations] = useState(Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null)));\n  const [tryStates, setTryStates] = useState(new Array(SETTING.COUNT_OF_TRY).fill(null));\n  const [number, setNumber] = useState(0);\n  const {\n    currentStep,\n    gameOver,\n    wordLength\n  } = gameData;\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [cookies, setCookie] = useCookies([\"index\", \"states\", \"guessedWords\", \"selectedLetters\", \"currentStep\", \"number\", \"gameOver\", \"animations\"]);\n  const [word, setWord] = useState(\"\");\n  const {\n    Difference_In_Days: index\n  } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n\n    if (cookies.guessedWords && cookies.states && cookies.selectedLetters && parseInt(cookies.index) === index) {\n      setGuessedWords(cookies.guessedWords);\n      setStates(cookies.states);\n      setSelectedLetters(cookies.selectedLetters);\n      updateGameData({ ...gameData,\n        currentStep: cookies.currentStep\n      });\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n\n      if (cookies.gameOver === 1) {\n        updateGameData({ ...gameData,\n          gameOver: true\n        });\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = function (content) {\n    let miniSec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = state => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = event => {\n    if (number < wordLength && !gameOver) {\n      if (isEvent(event)) {\n        guessedWords[currentStep][number] = event.key.toLowerCase();\n      } else {\n        guessedWords[currentStep][number] = event.toLowerCase();\n      }\n\n      states[currentStep][number] = KEY_STATE.TBD;\n      setGuessedWords(guessedWords);\n      setStates(states);\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(guessedWords[currentStep].join(\"\"))) {\n          for (var i = 0; i < wordLength; i++) {\n            let keyState;\n\n            if (guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(selectedLetters, \"letter\", guessedWords[currentStep][i]);\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n\n            states[currentStep][i] = keyState;\n            selectedLetters.push({\n              letter: guessedWords[currentStep][i],\n              state: keyState\n            });\n            setStates(states);\n            setSelectedLetters(selectedLetters);\n          }\n\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n          }\n\n          if (guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({ ...gameData,\n              currentStep: nextTry\n            });\n            setNumber(0);\n\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n\n          setCookie(\"states\", JSON.stringify(states));\n          setCookie(\"guessedWords\", JSON.stringify(guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      console.log(states);\n      states[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWords[currentStep][number - 1] = null;\n      setStates(states);\n      setGuessedWords(guessedWords);\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = event => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    states,\n    animations,\n    tryStates,\n    guessedWords,\n    message,\n    selectedLetters\n  };\n};\n\n_s(useGameRowHook, \"9RSd+p4OTUHSxE0+n1tO/ILKM/I=\", false, function () {\n  return [useCookies];\n});\n\nexport default useGameRowHook;","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx"],"names":["useContext","useEffect","useState","useCookies","ANIMATIONS","KEYBOARD","KEY_STATE","MESSAGE","SETTING","gameWords","findDateDiff","isEvent","isValidChar","removeByAttr","GameContext","words","require","useGameRowHook","gameData","updateGameData","message","setMessage","initialGuessedWords","Array","from","COUNT_OF_TRY","wordLength","fill","initialStates","EMPTY","states","guessedWords","animations","setAnimations","tryStates","setTryStates","number","setNumber","currentStep","gameOver","selectedLetters","setSelectedLetters","cookies","setCookie","word","setWord","Difference_In_Days","index","parseInt","setGuessedWords","setStates","splitedWord","split","refreshMessage","content","miniSec","setTimeout","refreshStates","state","pressLetter","event","key","toLowerCase","TBD","pressEnter","NOT_ENOUGH_LETTER","includes","join","i","keyState","CORRECT","PRESENT","ABSENT","push","letter","SCALE_CENTER","nextTry","INCORRECT","JSON","stringify","NOT_EXIST","pressBackspace","console","log","onKeyPressed","keyCode","BACKSPACE","ENTER","FINISH_GAME"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../../pages/game-page\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(KEY_STATE.EMPTY)\n  );\n  updateGameData({...gameData, states:initialStates,guessedWords: initialGuessedWords});\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [selectedLetters, setSelectedLetters] = useState<any>([]);\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      setGuessedWords(cookies.guessedWords);\n      setStates(cookies.states);\n      setSelectedLetters(cookies.selectedLetters);\n      updateGameData({...gameData,currentStep:cookies.currentStep})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      if (isEvent(event)) {\n        guessedWords[currentStep][number] = event.key.toLowerCase();\n      } else {\n        guessedWords[currentStep][number] = event.toLowerCase();\n      }\n      states[currentStep][number] = KEY_STATE.TBD;\n      setGuessedWords(guessedWords);\n      setStates(states);\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                selectedLetters,\n                \"letter\",\n                guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            states[currentStep][i] = keyState;\n            selectedLetters.push({\n              letter: guessedWords[currentStep][i],\n              state: keyState,\n            });\n            setStates(states);\n            setSelectedLetters(selectedLetters);\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(states));\n          setCookie(\"guessedWords\", JSON.stringify(guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      console.log(states)\n      states[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWords[currentStep][number - 1] = null;\n      setStates(states);\n      setGuessedWords(guessedWords);\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    states,\n    animations,\n    tryStates,\n    guessedWords,\n    message,\n    selectedLetters,\n  };\n};\nexport default useGameRowHook;\n"]},"metadata":{},"sourceType":"module"}