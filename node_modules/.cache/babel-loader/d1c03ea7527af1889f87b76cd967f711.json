{"ast":null,"code":"var _jsxFileName = \"/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx\",\n    _s = $RefreshSig$();\n\nimport GameTile from \"../game-tile/game-tile\";\nimport { SETTING } from \"../../global/global\";\nimport KeyBoard from \"../keyboard/keyboard\";\nimport \"./game-row.scss\";\nimport useGameRowHook from \"./game-row-hook\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport { GameContext } from \"../../pages/game-page\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameRow = () => {\n  _s();\n\n  const {\n    gameData\n  } = useContext(GameContext);\n  const {\n    wordLength\n  } = gameData;\n  const {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  } = useGameRowHook();\n  const ref = useRef(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n  });\n  var rows = [];\n\n  for (var i = 0; i < SETTING.COUNT_OF_TRY; i++) {\n    var tile = [];\n\n    for (var j = 0; j < wordLength; j++) {\n      tile.push( /*#__PURE__*/_jsxDEV(GameTile, {\n        state: states[i][j],\n        content: guessedWords[i][j],\n        animation: animations[i][j]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this));\n    }\n\n    rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      \"data-state\": tryStates[i],\n      children: tile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onKeyDown: onKeyPressed,\n    tabIndex: 0,\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"board-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board\",\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), message ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification\",\n        id: \"game-notification\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KeyBoard, {\n      selectedLetters: selectedLetters,\n      pressVirualKeyBoard: pressLetter,\n      pressEnter: pressEnter,\n      pressBackspace: pressBackspace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameRow, \"8x+nCaNVNIXTdUlCTnwpcFOiWWY=\", false, function () {\n  return [useGameRowHook];\n});\n\n_c = GameRow;\nexport default GameRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameRow\");","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row.tsx"],"names":["GameTile","SETTING","KeyBoard","useGameRowHook","useContext","useEffect","useRef","GameContext","GameRow","gameData","wordLength","onKeyPressed","pressEnter","pressLetter","pressBackspace","animations","tryStates","message","ref","current","focus","rows","i","COUNT_OF_TRY","tile","j","push","states","guessedWords","selectedLetters"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,iBAAP;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,MAAhC,QAA8C,OAA9C;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAACC,IAAAA;AAAD,MAAaL,UAAU,CAACG,WAAD,CAA7B;AACA,QAAM;AAACG,IAAAA;AAAD,MAAeD,QAArB;AACA,QAAM;AACJE,IAAAA,YADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA;AAPI,MAQFd,cAAc,EARlB;AAUA,QAAMe,GAAQ,GAAGZ,MAAM,CAAC,IAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,KAAZ;AACD;AACF,GAJQ,CAAT;AAMA,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,OAAO,CAACsB,YAA5B,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,QAAIE,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,UAApB,EAAgCe,CAAC,EAAjC,EAAqC;AACnCD,MAAAA,IAAI,CAACE,IAAL,eACE,QAAC,QAAD;AACE,QAAA,KAAK,EAAEC,MAAM,CAACL,CAAD,CAAN,CAAUG,CAAV,CADT;AAEE,QAAA,OAAO,EAAEG,YAAY,CAACN,CAAD,CAAZ,CAAgBG,CAAhB,CAFX;AAGE,QAAA,SAAS,EAAEV,UAAU,CAACO,CAAD,CAAV,CAAcG,CAAd;AAHb;AAAA;AAAA;AAAA;AAAA,cADF;AAOD;;AACDJ,IAAAA,IAAI,CAACK,IAAL,eACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,oBAAYV,SAAS,CAACM,CAAD,CAA1C;AAAA,gBACGE;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEb,YAAhB;AAA8B,IAAA,QAAQ,EAAE,CAAxC;AAA2C,IAAA,GAAG,EAAEO,GAAhD;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA,kBAAiBG;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,OAAO,gBACN;AAAK,QAAA,SAAS,EAAC,cAAf;AAA8B,QAAA,EAAE,EAAC,mBAAjC;AAAA,kBACGA;AADH;AAAA;AAAA;AAAA;AAAA,cADM,GAKN,EAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,QAAD;AACE,MAAA,eAAe,EAAEY,eADnB;AAEE,MAAA,mBAAmB,EAAEhB,WAFvB;AAGE,MAAA,UAAU,EAAED,UAHd;AAIE,MAAA,cAAc,EAAEE;AAJlB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA3DD;;GAAMN,O;UAWAL,c;;;KAXAK,O;AA4DN,eAAeA,OAAf","sourcesContent":["import GameTile from \"../game-tile/game-tile\";\nimport { SETTING } from \"../../global/global\";\nimport KeyBoard from \"../keyboard/keyboard\";\nimport \"./game-row.scss\";\nimport useGameRowHook from \"./game-row-hook\";\nimport { useContext, useEffect, useRef } from \"react\";\nimport { GameContext } from \"../../pages/game-page\";\n\nconst GameRow = () => {\n  const {gameData} = useContext(GameContext)\n  const {wordLength} = gameData\n  const {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message,\n  } = useGameRowHook();\n\n  const ref: any = useRef(null);\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  var rows = [];\n  for (var i = 0; i < SETTING.COUNT_OF_TRY; i++) {\n    var tile = [];\n    for (var j = 0; j < wordLength; j++) {\n      tile.push(\n        <GameTile\n          state={states[i][j]}\n          content={guessedWords[i][j]}\n          animation={animations[i][j]}\n        />\n      );\n    }\n    rows.push(\n      <div className=\"row\" data-state={tryStates[i]}>\n        {tile}\n      </div>\n    );\n  }\n\n  return (\n    <div onKeyDown={onKeyPressed} tabIndex={0} ref={ref}>\n      <div id=\"board-container\">\n        <div id=\"board\">{rows}</div>\n        {message ? (\n          <div className=\"notification\" id=\"game-notification\">\n            {message}\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <KeyBoard\n        selectedLetters={selectedLetters}\n        pressVirualKeyBoard={pressLetter}\n        pressEnter={pressEnter}\n        pressBackspace={pressBackspace}\n      />\n    </div>\n  );\n};\nexport default GameRow;\n"]},"metadata":{},"sourceType":"module"}