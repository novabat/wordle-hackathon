{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { ANIMATIONS, KEYBOARD, KEY_STATE, MESSAGE, SETTING } from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport { findDateDiff, isEvent, isValidChar, removeByAttr } from \"./game-row-helper\";\nimport { GameContext } from \"../../pages/game-page\";\n\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  _s();\n\n  const {\n    gameData,\n    updateGameData\n  } = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null));\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(KEY_STATE.EMPTY));\n  updateGameData({ ...gameData,\n    states: initialStates,\n    guessedWords: initialGuessedWords\n  });\n  const [animations, setAnimations] = useState(Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null)));\n  const [tryStates, setTryStates] = useState(new Array(SETTING.COUNT_OF_TRY).fill(null));\n  const [number, setNumber] = useState(0);\n  const {\n    currentStep,\n    gameOver,\n    wordLength\n  } = gameData;\n  const [cookies, setCookie] = useCookies([\"index\", \"states\", \"guessedWords\", \"selectedLetters\", \"currentStep\", \"number\", \"gameOver\", \"animations\"]);\n  const [word, setWord] = useState(\"\");\n  const {\n    Difference_In_Days: index\n  } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n\n    if (cookies.guessedWords && cookies.states && cookies.selectedLetters && parseInt(cookies.index) === index) {\n      updateGameData({ ...gameData,\n        currentStep: cookies.currentStep,\n        guessedWords: cookies.guessedWords,\n        states: cookies.states,\n        selectedLetters: cookies.selectedLetters\n      });\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n\n      if (cookies.gameOver === 1) {\n        updateGameData({ ...gameData,\n          gameOver: true\n        });\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = function (content) {\n    let miniSec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = state => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = event => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      }\n\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({ ...gameData,\n        guessedWords: guessedWordsNew,\n        states: statesNew\n      });\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i = 0; i < wordLength; i++) {\n            let keyState;\n\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(gameData.selectedLetters, \"letter\", gameData.guessedWords[currentStep][i]);\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n\n            let statesNew = gameData.states;\n            let selectedLettersNew = gameData.selectedLetters;\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState\n            });\n            updateGameData({ ...gameData,\n              states: statesNew,\n              selectedLetters: selectedLettersNew\n            });\n          }\n\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n          }\n\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({ ...gameData,\n              currentStep: nextTry\n            });\n            setNumber(0);\n\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({ ...gameData,\n        states: statesNew,\n        guessedWords: guessedWordsNew\n      });\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = event => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\n\n_s(useGameRowHook, \"TWvWCX/3n8sqIV8NkaAVZlgPrFw=\", false, function () {\n  return [useCookies];\n});\n\nexport default useGameRowHook;","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx"],"names":["useContext","useEffect","useState","useCookies","ANIMATIONS","KEYBOARD","KEY_STATE","MESSAGE","SETTING","gameWords","findDateDiff","isEvent","isValidChar","removeByAttr","GameContext","words","require","useGameRowHook","gameData","updateGameData","message","setMessage","initialGuessedWords","Array","from","COUNT_OF_TRY","wordLength","fill","initialStates","EMPTY","states","guessedWords","animations","setAnimations","tryStates","setTryStates","number","setNumber","currentStep","gameOver","cookies","setCookie","word","setWord","Difference_In_Days","index","selectedLetters","parseInt","splitedWord","split","refreshMessage","content","miniSec","setTimeout","refreshStates","state","pressLetter","event","guessedWordsNew","key","toLowerCase","statesNew","TBD","pressEnter","NOT_ENOUGH_LETTER","includes","join","i","keyState","CORRECT","PRESENT","ABSENT","selectedLettersNew","push","letter","SCALE_CENTER","nextTry","INCORRECT","JSON","stringify","NOT_EXIST","pressBackspace","onKeyPressed","keyCode","BACKSPACE","ENTER","FINISH_GAME"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../../pages/game-page\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(KEY_STATE.EMPTY)\n  );\n  updateGameData({...gameData, states:initialStates,guessedWords: initialGuessedWords});\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      updateGameData({...gameData,currentStep:cookies.currentStep,guessedWords:cookies.guessedWords,states:cookies.states,selectedLetters:cookies.selectedLetters})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      }\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({...gameData,guessedWords:guessedWordsNew,states:statesNew})\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                gameData.selectedLetters,\n                \"letter\",\n                gameData.guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            let statesNew = gameData.states\n            let selectedLettersNew = gameData.selectedLetters\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState,\n            });\n            updateGameData({...gameData, states:statesNew, selectedLetters:selectedLettersNew})\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({...gameData,states:statesNew,guessedWords:guessedWordsNew })\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message,\n  };\n};\nexport default useGameRowHook;\n"]},"metadata":{},"sourceType":"module"}