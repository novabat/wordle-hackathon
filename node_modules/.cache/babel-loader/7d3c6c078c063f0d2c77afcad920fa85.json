{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { ANIMATIONS, KEYBOARD, KEY_STATE, MESSAGE, SETTING } from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport { findDateDiff, isEvent, isValidChar, removeByAttr } from \"./game-row-helper\";\n\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(SETTING.LENGTH_OF_WORD).fill(null));\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(SETTING.LENGTH_OF_WORD).fill(KEY_STATE.EMPTY));\n  const [guessedWords, setGuessedWords] = useState(initialGuessedWords);\n  const [states, setStates] = useState(initialStates);\n  const [animations, setAnimations] = useState(Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(SETTING.LENGTH_OF_WORD).fill(null)));\n  const [tryStates, setTryStates] = useState(new Array(SETTING.COUNT_OF_TRY).fill(null));\n  const [number, setNumber] = useState(0);\n  const [tryCount, setTryCount] = useState(0);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [selectedLetters, setSelectedLetters] = useState([]);\n  const [cookies, setCookie] = useCookies([\"index\", \"states\", \"guessedWords\", \"selectedLetters\", \"tryCount\", \"number\", \"gameFinished\", \"animations\"]);\n  const [word, setWord] = useState(\"\");\n  const {\n    Difference_In_Days: index\n  } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n\n    if (cookies.guessedWords && cookies.states && cookies.selectedLetters && parseInt(cookies.index) === index) {\n      setGuessedWords(cookies.guessedWords);\n      setStates(cookies.states);\n      setSelectedLetters(cookies.selectedLetters);\n      setTryCount(parseInt(cookies.tryCount));\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n\n      if (parseInt(cookies.gameFinished) === 1) {\n        setGameFinished(true);\n      }\n    }\n  }, [index, cookies.guessedWords, cookies.states, cookies.selectedLetters, cookies.index, cookies.tryCount, cookies.number, cookies.gameFinished, cookies.animations]);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = function (content) {\n    let miniSec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = state => {\n    tryStates[tryCount] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = event => {\n    if (number < SETTING.LENGTH_OF_WORD && !gameFinished) {\n      if (isEvent(event)) {\n        guessedWords[tryCount][number] = event.key.toLowerCase();\n      } else {\n        guessedWords[tryCount][number] = event.toLowerCase();\n      }\n\n      states[tryCount][number] = KEY_STATE.TBD;\n      setGuessedWords(guessedWords);\n      setStates(states);\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameFinished) {\n      if (number < SETTING.LENGTH_OF_WORD) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(guessedWords[tryCount].join(\"\"))) {\n          for (var i = 0; i < SETTING.LENGTH_OF_WORD; i++) {\n            let keyState;\n\n            if (guessedWords[tryCount][i] === splitedWord[i]) {\n              removeByAttr(selectedLetters, \"letter\", guessedWords[tryCount][i]);\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(guessedWords[tryCount][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n\n            states[tryCount][i] = keyState;\n            selectedLetters.push({\n              letter: guessedWords[tryCount][i],\n              state: keyState\n            });\n            setStates(states);\n            setSelectedLetters(selectedLetters);\n          }\n\n          if (tryCount === SETTING.COUNT_OF_TRY - 1) {\n            setGameFinished(true);\n          }\n\n          if (guessedWords[tryCount].join(\"\") === word) {\n            animations[tryCount].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            setGameFinished(true);\n            setCookie(\"gameFinished\", 1);\n          } else {\n            animations[tryCount].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = tryCount + 1;\n            setTryCount(nextTry);\n            setNumber(0);\n\n            if (tryCount === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameFinished\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"tryCount\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameFinished\", 0);\n            }\n          }\n\n          setCookie(\"states\", JSON.stringify(states));\n          setCookie(\"guessedWords\", JSON.stringify(guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameFinished) {\n      states[tryCount][number - 1] = KEY_STATE.EMPTY;\n      guessedWords[tryCount][number - 1] = null;\n      setStates(states);\n      setGuessedWords(guessedWords);\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = event => {\n    if (!gameFinished) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    states,\n    animations,\n    tryStates,\n    guessedWords,\n    message,\n    selectedLetters\n  };\n};\n\n_s(useGameRowHook, \"KQMki3sPrB+bsVaOOJDq/pM98pM=\", false, function () {\n  return [useCookies];\n});\n\nexport default useGameRowHook;","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx"],"names":["useEffect","useState","useCookies","ANIMATIONS","KEYBOARD","KEY_STATE","MESSAGE","SETTING","gameWords","findDateDiff","isEvent","isValidChar","removeByAttr","words","require","useGameRowHook","message","setMessage","initialGuessedWords","Array","from","COUNT_OF_TRY","LENGTH_OF_WORD","fill","initialStates","EMPTY","guessedWords","setGuessedWords","states","setStates","animations","setAnimations","tryStates","setTryStates","number","setNumber","tryCount","setTryCount","gameFinished","setGameFinished","selectedLetters","setSelectedLetters","cookies","setCookie","word","setWord","Difference_In_Days","index","parseInt","splitedWord","split","refreshMessage","content","miniSec","setTimeout","refreshStates","state","pressLetter","event","key","toLowerCase","TBD","pressEnter","NOT_ENOUGH_LETTER","includes","join","i","keyState","CORRECT","PRESENT","ABSENT","push","letter","SCALE_CENTER","nextTry","INCORRECT","JSON","stringify","NOT_EXIST","pressBackspace","onKeyPressed","keyCode","BACKSPACE","ENTER","FINISH_GAME"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(SETTING.LENGTH_OF_WORD).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(SETTING.LENGTH_OF_WORD).fill(KEY_STATE.EMPTY)\n  );\n  const [guessedWords, setGuessedWords]: Array<any> =\n    useState(initialGuessedWords);\n  const [states, setStates]: any = useState(initialStates);\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(SETTING.LENGTH_OF_WORD).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const [tryCount, setTryCount] = useState(0);\n  const [gameFinished, setGameFinished] = useState(false);\n  const [selectedLetters, setSelectedLetters] = useState<any>([]);\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"tryCount\",\n    \"number\",\n    \"gameFinished\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      setGuessedWords(cookies.guessedWords);\n      setStates(cookies.states);\n      setSelectedLetters(cookies.selectedLetters);\n      setTryCount(parseInt(cookies.tryCount));\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if (parseInt(cookies.gameFinished) === 1) {\n        setGameFinished(true);\n      }\n    }\n  }, [\n    index,\n    cookies.guessedWords,\n    cookies.states,\n    cookies.selectedLetters,\n    cookies.index,\n    cookies.tryCount,\n    cookies.number,\n    cookies.gameFinished,\n    cookies.animations,\n  ]);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[tryCount] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < SETTING.LENGTH_OF_WORD && !gameFinished) {\n      if (isEvent(event)) {\n        guessedWords[tryCount][number] = event.key.toLowerCase();\n      } else {\n        guessedWords[tryCount][number] = event.toLowerCase();\n      }\n      states[tryCount][number] = KEY_STATE.TBD;\n      setGuessedWords(guessedWords);\n      setStates(states);\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameFinished) {\n      if (number < SETTING.LENGTH_OF_WORD) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(guessedWords[tryCount].join(\"\"))) {\n          for (var i: number = 0; i < SETTING.LENGTH_OF_WORD; i++) {\n            let keyState;\n            if (guessedWords[tryCount][i] === splitedWord[i]) {\n              removeByAttr(\n                selectedLetters,\n                \"letter\",\n                guessedWords[tryCount][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(guessedWords[tryCount][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            states[tryCount][i] = keyState;\n            selectedLetters.push({\n              letter: guessedWords[tryCount][i],\n              state: keyState,\n            });\n            setStates(states);\n            setSelectedLetters(selectedLetters);\n          }\n          if (tryCount === SETTING.COUNT_OF_TRY - 1) {\n            setGameFinished(true);\n          }\n          if (guessedWords[tryCount].join(\"\") === word) {\n            animations[tryCount].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            setGameFinished(true);\n            setCookie(\"gameFinished\", 1);\n          } else {\n            animations[tryCount].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = tryCount + 1;\n            setTryCount(nextTry);\n            setNumber(0);\n            if (tryCount === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameFinished\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"tryCount\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameFinished\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(states));\n          setCookie(\"guessedWords\", JSON.stringify(guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameFinished) {\n      states[tryCount][number - 1] = KEY_STATE.EMPTY;\n      guessedWords[tryCount][number - 1] = null;\n      setStates(states);\n      setGuessedWords(guessedWords);\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameFinished) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    states,\n    animations,\n    tryStates,\n    guessedWords,\n    message,\n    selectedLetters,\n  };\n};\nexport default useGameRowHook;\n"]},"metadata":{},"sourceType":"module"}