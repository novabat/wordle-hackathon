{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport { ANIMATIONS, KEYBOARD, KEY_STATE, MESSAGE, SETTING } from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport { findDateDiff, isEvent, isValidChar, removeByAttr } from \"./game-row-helper\";\nimport { GameContext } from \"../..\";\n\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  _s();\n\n  const {\n    gameData,\n    updateGameData\n  } = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null));\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(KEY_STATE.EMPTY));\n  const [animations, setAnimations] = useState(Array.from(Array(SETTING.COUNT_OF_TRY), () => new Array(gameData.wordLength).fill(null)));\n  const [tryStates, setTryStates] = useState(new Array(SETTING.COUNT_OF_TRY).fill(null));\n  const [number, setNumber] = useState(0);\n  const {\n    currentStep,\n    gameOver,\n    wordLength\n  } = gameData;\n  const [cookies, setCookie] = useCookies([\"index\", \"states\", \"guessedWords\", \"selectedLetters\", \"currentStep\", \"number\", \"gameOver\", \"animations\"]);\n  const [word, setWord] = useState(\"\");\n  const {\n    Difference_In_Days: index\n  } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    console.log(gameData.wordLength);\n\n    if (cookies.guessedWords && cookies.states && cookies.selectedLetters && parseInt(cookies.index) === index) {\n      updateGameData({ ...gameData,\n        currentStep: cookies.currentStep,\n        guessedWords: cookies.guessedWords,\n        states: cookies.states,\n        selectedLetters: cookies.selectedLetters\n      });\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n\n      if (cookies.gameOver === 1) {\n        updateGameData({ ...gameData,\n          gameOver: true\n        });\n      }\n    } else {\n      updateGameData({ ...gameData,\n        states: initialStates,\n        guessedWords: initialGuessedWords\n      });\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = function (content) {\n    let miniSec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = state => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = event => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({ ...gameData,\n          guessedWords: guessedWordsNew\n        });\n      }\n\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({ ...gameData,\n        guessedWords: guessedWordsNew,\n        states: statesNew\n      });\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i = 0; i < wordLength; i++) {\n            let keyState;\n\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(gameData.selectedLetters, \"letter\", gameData.guessedWords[currentStep][i]);\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n\n            let statesNew = gameData.states;\n            let selectedLettersNew = gameData.selectedLetters;\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState\n            });\n            updateGameData({ ...gameData,\n              states: statesNew,\n              selectedLetters: selectedLettersNew\n            });\n          }\n\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n          }\n\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({ ...gameData,\n              gameOver: true\n            });\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({ ...gameData,\n              currentStep: nextTry\n            });\n            setNumber(0);\n\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({ ...gameData,\n        states: statesNew,\n        guessedWords: guessedWordsNew\n      });\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = event => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\n\n_s(useGameRowHook, \"TWvWCX/3n8sqIV8NkaAVZlgPrFw=\", false, function () {\n  return [useCookies];\n});\n\nexport default useGameRowHook;","map":{"version":3,"sources":["/Users/adityaravishankar/Documents/hackathon/Wordle/src/components/game-row/game-row-hook.tsx"],"names":["useContext","useEffect","useState","useCookies","ANIMATIONS","KEYBOARD","KEY_STATE","MESSAGE","SETTING","gameWords","findDateDiff","isEvent","isValidChar","removeByAttr","GameContext","words","require","useGameRowHook","gameData","updateGameData","message","setMessage","initialGuessedWords","Array","from","COUNT_OF_TRY","wordLength","fill","initialStates","EMPTY","animations","setAnimations","tryStates","setTryStates","number","setNumber","currentStep","gameOver","cookies","setCookie","word","setWord","Difference_In_Days","index","console","log","guessedWords","states","selectedLetters","parseInt","splitedWord","split","refreshMessage","content","miniSec","setTimeout","refreshStates","state","pressLetter","event","guessedWordsNew","key","toLowerCase","statesNew","TBD","pressEnter","NOT_ENOUGH_LETTER","includes","join","i","keyState","CORRECT","PRESENT","ABSENT","selectedLettersNew","push","letter","SCALE_CENTER","nextTry","INCORRECT","JSON","stringify","NOT_EXIST","pressBackspace","onKeyPressed","keyCode","BACKSPACE","ENTER","FINISH_GAME"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SACEC,UADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,OAJF,EAKEC,OALF,QAMO,qBANP;AAOA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SACEC,YADF,EAEEC,OAFF,EAGEC,WAHF,EAIEC,YAJF,QAKO,mBALP;AAOA,SAASC,WAAT,QAA4B,OAA5B;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,2BAAD,CAAnB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAACC,IAAAA,QAAD;AAAUC,IAAAA;AAAV,MAA4BnB,UAAU,CAACc,WAAD,CAA5C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMoB,mBAAmB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACf,OAAO,CAACiB,YAAT,CAAhB,EAAwC,MAClE,IAAIF,KAAJ,CAAUL,QAAQ,CAACQ,UAAnB,EAA+BC,IAA/B,CAAoC,IAApC,CAD0B,CAA5B;AAGA,QAAMC,aAAa,GAAGL,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACf,OAAO,CAACiB,YAAT,CAAhB,EAAwC,MAC5D,IAAIF,KAAJ,CAAUL,QAAQ,CAACQ,UAAnB,EAA+BC,IAA/B,CAAoCrB,SAAS,CAACuB,KAA9C,CADoB,CAAtB;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAAmC7B,QAAQ,CAC/CqB,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACf,OAAO,CAACiB,YAAT,CAAhB,EAAwC,MACtC,IAAIF,KAAJ,CAAUL,QAAQ,CAACQ,UAAnB,EAA+BC,IAA/B,CAAoC,IAApC,CADF,CAD+C,CAAjD;AAKA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CACxC,IAAIqB,KAAJ,CAAUf,OAAO,CAACiB,YAAlB,EAAgCE,IAAhC,CAAqC,IAArC,CADwC,CAA1C;AAGA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBjC,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAACkC,IAAAA,WAAD;AAAcC,IAAAA,QAAd;AAAwBX,IAAAA;AAAxB,MAAsCR,QAA5C;AACA,QAAM,CAACoB,OAAD,EAAUC,SAAV,IAAuBpC,UAAU,CAAC,CACtC,OADsC,EAEtC,QAFsC,EAGtC,cAHsC,EAItC,iBAJsC,EAKtC,aALsC,EAMtC,QANsC,EAOtC,UAPsC,EAQtC,YARsC,CAAD,CAAvC;AAUA,QAAM,CAACqC,IAAD,EAAOC,OAAP,IAAuBvC,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM;AAAEwC,IAAAA,kBAAkB,EAAEC;AAAtB,MAAgCjC,YAAY,EAAlD;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdwC,IAAAA,OAAO,CAAChC,SAAS,CAACkC,KAAD,CAAV,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY3B,QAAQ,CAACQ,UAArB;;AACA,QACEY,OAAO,CAACQ,YAAR,IACAR,OAAO,CAACS,MADR,IAEAT,OAAO,CAACU,eAFR,IAGAC,QAAQ,CAACX,OAAO,CAACK,KAAT,CAAR,KAA4BA,KAJ9B,EAKE;AACAxB,MAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAakB,QAAAA,WAAW,EAACE,OAAO,CAACF,WAAjC;AAA6CU,QAAAA,YAAY,EAACR,OAAO,CAACQ,YAAlE;AAA+EC,QAAAA,MAAM,EAACT,OAAO,CAACS,MAA9F;AAAqGC,QAAAA,eAAe,EAACV,OAAO,CAACU;AAA7H,OAAD,CAAd;AACAb,MAAAA,SAAS,CAACc,QAAQ,CAACX,OAAO,CAACJ,MAAT,CAAT,CAAT;AACAH,MAAAA,aAAa,CAACO,OAAO,CAACR,UAAT,CAAb;;AACA,UAAGQ,OAAO,CAACD,QAAR,KAAoB,CAAvB,EAAyB;AACvBlB,QAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAamB,UAAAA,QAAQ,EAAC;AAAtB,SAAD,CAAd;AACD;AACF,KAZD,MAaI;AACFlB,MAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAc6B,QAAAA,MAAM,EAACnB,aAArB;AAAmCkB,QAAAA,YAAY,EAAExB;AAAjD,OAAD,CAAd;AACD;AACF,GAnBQ,EAmBN,EAnBM,CAAT;AAoBA,QAAM4B,WAAW,GAAGV,IAAI,CAACW,KAAL,CAAW,EAAX,CAApB;;AAEA,QAAMC,cAAc,GAAG,UAACC,OAAD,EAA6C;AAAA,QAA3BC,OAA2B,uEAAT,IAAS;AAClEjC,IAAAA,UAAU,CAACgC,OAAD,CAAV;AACAE,IAAAA,UAAU,CAAC,MAAM;AACflC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KAFS,EAEPiC,OAFO,CAAV;AAGD,GALD;;AAOA,QAAME,aAAa,GAAIC,KAAD,IAAmB;AACvCzB,IAAAA,SAAS,CAACI,WAAD,CAAT,GAAyBqB,KAAzB;AACAxB,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAuB,IAAAA,UAAU,CAAC,MAAM;AACftB,MAAAA,YAAY,CAAC,IAAIV,KAAJ,CAAUf,OAAO,CAACiB,YAAlB,EAAgCE,IAAhC,CAAqC,IAArC,CAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAND;;AAQA,QAAM+B,WAAW,GAAIC,KAAD,IAAoC;AACtD,QAAIzB,MAAM,GAAGR,UAAT,IAAuB,CAACW,QAA5B,EAAsC;AACpC,UAAIuB,eAAe,GAAG1C,QAAQ,CAAC4B,YAA/B;;AACA,UAAInC,OAAO,CAACgD,KAAD,CAAX,EAAoB;AAClBC,QAAAA,eAAe,CAACxB,WAAD,CAAf,CAA6BF,MAA7B,IAAuCyB,KAAK,CAACE,GAAN,CAAUC,WAAV,EAAvC;AACA3C,QAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAa4B,UAAAA,YAAY,EAACc;AAA1B,SAAD,CAAd;AACD,OAHD,MAGO;AACLA,QAAAA,eAAe,CAACxB,WAAD,CAAf,CAA6BF,MAA7B,IAAuCyB,KAAK,CAACG,WAAN,EAAvC;AACA3C,QAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAa4B,UAAAA,YAAY,EAACc;AAA1B,SAAD,CAAd;AACD;;AACD,UAAIG,SAAS,GAAG7C,QAAQ,CAAC6B,MAAzB;AACAgB,MAAAA,SAAS,CAAC3B,WAAD,CAAT,CAAuBF,MAAvB,IAAiC5B,SAAS,CAAC0D,GAA3C;AACA7C,MAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAa4B,QAAAA,YAAY,EAACc,eAA1B;AAA0Cb,QAAAA,MAAM,EAACgB;AAAjD,OAAD,CAAd;AACA5B,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACD;AACF,GAfD;;AAiBA,QAAM+B,UAAU,GAAG,MAAM;AACvB,QAAI,CAAC5B,QAAL,EAAe;AACb,UAAIH,MAAM,GAAGR,UAAb,EAAyB;AACvB0B,QAAAA,cAAc,CAAC7C,OAAO,CAAC2D,iBAAT,CAAd;AACAV,QAAAA,aAAa,CAAC,SAAD,CAAb;AACD,OAHD,MAGO;AACL,YAAIzC,KAAK,CAACoD,QAAN,CAAejD,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCgC,IAAnC,CAAwC,EAAxC,CAAf,CAAJ,EAAiE;AAC/D,eAAK,IAAIC,CAAS,GAAG,CAArB,EAAwBA,CAAC,GAAG3C,UAA5B,EAAwC2C,CAAC,EAAzC,EAA6C;AAC3C,gBAAIC,QAAJ;;AACA,gBAAIpD,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCiC,CAAnC,MAA0CnB,WAAW,CAACmB,CAAD,CAAzD,EAA8D;AAC5DxD,cAAAA,YAAY,CACVK,QAAQ,CAAC8B,eADC,EAEV,QAFU,EAGV9B,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCiC,CAAnC,CAHU,CAAZ;AAKAC,cAAAA,QAAQ,GAAGhE,SAAS,CAACiE,OAArB;AACD,aAPD,MAOO,IAAIrB,WAAW,CAACiB,QAAZ,CAAqBjD,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCiC,CAAnC,CAArB,CAAJ,EAAiE;AACtEC,cAAAA,QAAQ,GAAGhE,SAAS,CAACkE,OAArB;AACD,aAFM,MAEA;AACLF,cAAAA,QAAQ,GAAGhE,SAAS,CAACmE,MAArB;AACD;;AACD,gBAAIV,SAAS,GAAG7C,QAAQ,CAAC6B,MAAzB;AACA,gBAAI2B,kBAAkB,GAAGxD,QAAQ,CAAC8B,eAAlC;AACAe,YAAAA,SAAS,CAAC3B,WAAD,CAAT,CAAuBiC,CAAvB,IAA4BC,QAA5B;AACAI,YAAAA,kBAAkB,CAACC,IAAnB,CAAwB;AACtBC,cAAAA,MAAM,EAAE1D,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCiC,CAAnC,CADc;AAEtBZ,cAAAA,KAAK,EAAEa;AAFe,aAAxB;AAIAnD,YAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAc6B,cAAAA,MAAM,EAACgB,SAArB;AAAgCf,cAAAA,eAAe,EAAC0B;AAAhD,aAAD,CAAd;AACD;;AACD,cAAItC,WAAW,KAAK5B,OAAO,CAACiB,YAAR,GAAuB,CAA3C,EAA8C;AAC5CN,YAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAcmB,cAAAA,QAAQ,EAAC;AAAvB,aAAD,CAAd;AACD;;AACD,cAAInB,QAAQ,CAAC4B,YAAT,CAAsBV,WAAtB,EAAmCgC,IAAnC,CAAwC,EAAxC,MAAgD5B,IAApD,EAA0D;AACxDV,YAAAA,UAAU,CAACM,WAAD,CAAV,CAAwBT,IAAxB,CAA6BvB,UAAU,CAACyE,YAAxC;AACA9C,YAAAA,aAAa,CAACD,UAAD,CAAb;AACAsB,YAAAA,cAAc,CAAC7C,OAAO,CAACgE,OAAT,CAAd;AACApD,YAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAcmB,cAAAA,QAAQ,EAAC;AAAvB,aAAD,CAAd;AACAE,YAAAA,SAAS,CAAC,UAAD,EAAa,CAAb,CAAT;AACD,WAND,MAMO;AACLT,YAAAA,UAAU,CAACM,WAAD,CAAV,CAAwBT,IAAxB,CAA6BvB,UAAU,CAACyE,YAAxC;AACA9C,YAAAA,aAAa,CAACD,UAAD,CAAb;AACA,kBAAMgD,OAAO,GAAG1C,WAAW,GAAG,CAA9B;AACAjB,YAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAckB,cAAAA,WAAW,EAAC0C;AAA1B,aAAD,CAAd;AACA3C,YAAAA,SAAS,CAAC,CAAD,CAAT;;AACA,gBAAIC,WAAW,KAAK5B,OAAO,CAACiB,YAAR,GAAuB,CAA3C,EAA8C;AAC5C2B,cAAAA,cAAc,CAACZ,IAAD,EAAO,IAAP,CAAd;AACAD,cAAAA,SAAS,CAAC,UAAD,EAAa,CAAb,CAAT;AACD,aAHD,MAGO;AACLa,cAAAA,cAAc,CAAC7C,OAAO,CAACwE,SAAT,CAAd;AACAxC,cAAAA,SAAS,CAAC,aAAD,EAAgBuC,OAAhB,CAAT;AACAvC,cAAAA,SAAS,CAAC,QAAD,EAAW,CAAX,CAAT;AACAA,cAAAA,SAAS,CAAC,UAAD,EAAa,CAAb,CAAT;AACD;AACF;;AACDA,UAAAA,SAAS,CAAC,QAAD,EAAWyC,IAAI,CAACC,SAAL,CAAe/D,QAAQ,CAAC6B,MAAxB,CAAX,CAAT;AACAR,UAAAA,SAAS,CAAC,cAAD,EAAiByC,IAAI,CAACC,SAAL,CAAe/D,QAAQ,CAAC4B,YAAxB,CAAjB,CAAT;AACAP,UAAAA,SAAS,CAAC,iBAAD,EAAoByC,IAAI,CAACC,SAAL,CAAe/D,QAAQ,CAAC8B,eAAxB,CAApB,CAAT;AACAT,UAAAA,SAAS,CAAC,YAAD,EAAeyC,IAAI,CAACC,SAAL,CAAenD,UAAf,CAAf,CAAT;AACAS,UAAAA,SAAS,CAAC,OAAD,EAAUI,KAAV,CAAT;AACD,SAtDD,MAsDO;AACLS,UAAAA,cAAc,CAAC7C,OAAO,CAAC2E,SAAT,CAAd;AACD;AACF;AACF;AACF,GAjED;;AAmEA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIjD,MAAM,GAAG,CAAT,IAAc,CAACG,QAAnB,EAA6B;AAC3B,UAAI0B,SAAS,GAAG7C,QAAQ,CAAC6B,MAAzB;AACA,UAAIa,eAAe,GAAG1C,QAAQ,CAAC4B,YAA/B;AACAiB,MAAAA,SAAS,CAAC3B,WAAD,CAAT,CAAuBF,MAAM,GAAG,CAAhC,IAAqC5B,SAAS,CAACuB,KAA/C;AACA+B,MAAAA,eAAe,CAACxB,WAAD,CAAf,CAA6BF,MAAM,GAAG,CAAtC,IAA2C,IAA3C;AACAf,MAAAA,cAAc,CAAC,EAAC,GAAGD,QAAJ;AAAa6B,QAAAA,MAAM,EAACgB,SAApB;AAA8BjB,QAAAA,YAAY,EAACc;AAA3C,OAAD,CAAd;AACAzB,MAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACD;AACF,GATD;;AAWA,QAAMkD,YAAY,GAAIzB,KAAD,IAA2B;AAC9C,QAAI,CAACtB,QAAL,EAAe;AACb,UAAIzB,WAAW,CAAC+C,KAAD,CAAf,EAAwB;AACtBD,QAAAA,WAAW,CAACC,KAAD,CAAX;AACD,OAFD,MAEO,IAAIA,KAAK,CAAC0B,OAAN,KAAkBhF,QAAQ,CAACiF,SAA/B,EAA0C;AAC/CH,QAAAA,cAAc;AACf,OAFM,MAEA,IAAIxB,KAAK,CAAC0B,OAAN,KAAkBhF,QAAQ,CAACkF,KAA/B,EAAsC;AAC3CtB,QAAAA,UAAU;AACX;AACF,KARD,MAQO;AACLb,MAAAA,cAAc,CAAC7C,OAAO,CAACiF,WAAT,CAAd;AACD;AACF,GAZD;;AAcA,SAAO;AACLJ,IAAAA,YADK;AAELnB,IAAAA,UAFK;AAGLP,IAAAA,WAHK;AAILyB,IAAAA,cAJK;AAKLrD,IAAAA,UALK;AAMLE,IAAAA,SANK;AAOLZ,IAAAA;AAPK,GAAP;AASD,CA1LD;;GAAMH,c;UAmByBd,U;;;AAwK/B,eAAec,cAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport {\n  ANIMATIONS,\n  KEYBOARD,\n  KEY_STATE,\n  MESSAGE,\n  SETTING,\n} from \"../../global/global\";\nimport { gameWords } from \"../../global/game-words\";\nimport {\n  findDateDiff,\n  isEvent,\n  isValidChar,\n  removeByAttr,\n} from \"./game-row-helper\";\nimport { IKeyBoardEvent } from \"./game-row-interface\";\nimport { GameContext } from \"../..\";\nvar words = require(\"an-array-of-english-words\");\n\nconst useGameRowHook = () => {\n  const {gameData,updateGameData} = useContext(GameContext);\n  const [message, setMessage] = useState(\"\");\n  const initialGuessedWords = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(null)\n  );\n  const initialStates = Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n    new Array(gameData.wordLength).fill(KEY_STATE.EMPTY)\n  );\n  const [animations, setAnimations]: any = useState(\n    Array.from(Array(SETTING.COUNT_OF_TRY), () =>\n      new Array(gameData.wordLength).fill(null)\n    )\n  );\n  const [tryStates, setTryStates] = useState(\n    new Array(SETTING.COUNT_OF_TRY).fill(null)\n  );\n  const [number, setNumber] = useState(0);\n  const {currentStep, gameOver, wordLength} = gameData;\n  const [cookies, setCookie] = useCookies([\n    \"index\",\n    \"states\",\n    \"guessedWords\",\n    \"selectedLetters\",\n    \"currentStep\",\n    \"number\",\n    \"gameOver\",\n    \"animations\",\n  ]);\n  const [word, setWord]: any = useState(\"\");\n  const { Difference_In_Days: index } = findDateDiff();\n  useEffect(() => {\n    setWord(gameWords[index]);\n    console.log(gameData.wordLength)\n    if (\n      cookies.guessedWords &&\n      cookies.states &&\n      cookies.selectedLetters &&\n      parseInt(cookies.index) === index\n    ) {\n      updateGameData({...gameData,currentStep:cookies.currentStep,guessedWords:cookies.guessedWords,states:cookies.states,selectedLetters:cookies.selectedLetters})\n      setNumber(parseInt(cookies.number));\n      setAnimations(cookies.animations);\n      if(cookies.gameOver ===1){\n        updateGameData({...gameData,gameOver:true})\n      }\n    }\n    else{\n      updateGameData({...gameData, states:initialStates,guessedWords: initialGuessedWords});\n    }\n  }, []);\n  const splitedWord = word.split(\"\");\n\n  const refreshMessage = (content: string, miniSec: number = 1000) => {\n    setMessage(content);\n    setTimeout(() => {\n      setMessage(\"\");\n    }, miniSec);\n  };\n\n  const refreshStates = (state: string) => {\n    tryStates[currentStep] = state;\n    setTryStates(tryStates);\n    setTimeout(() => {\n      setTryStates(new Array(SETTING.COUNT_OF_TRY).fill(null));\n    }, 1000);\n  };\n\n  const pressLetter = (event: IKeyBoardEvent | string) => {\n    if (number < wordLength && !gameOver) {\n      let guessedWordsNew = gameData.guessedWords;\n      if (isEvent(event)) {\n        guessedWordsNew[currentStep][number] = event.key.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      } else {\n        guessedWordsNew[currentStep][number] = event.toLowerCase();\n        updateGameData({...gameData,guessedWords:guessedWordsNew})\n      }\n      let statesNew = gameData.states;\n      statesNew[currentStep][number] = KEY_STATE.TBD;\n      updateGameData({...gameData,guessedWords:guessedWordsNew,states:statesNew})\n      setNumber(number + 1);\n    }\n  };\n\n  const pressEnter = () => {\n    if (!gameOver) {\n      if (number < wordLength) {\n        refreshMessage(MESSAGE.NOT_ENOUGH_LETTER);\n        refreshStates(\"invalid\");\n      } else {\n        if (words.includes(gameData.guessedWords[currentStep].join(\"\"))) {\n          for (var i: number = 0; i < wordLength; i++) {\n            let keyState;\n            if (gameData.guessedWords[currentStep][i] === splitedWord[i]) {\n              removeByAttr(\n                gameData.selectedLetters,\n                \"letter\",\n                gameData.guessedWords[currentStep][i]\n              );\n              keyState = KEY_STATE.CORRECT;\n            } else if (splitedWord.includes(gameData.guessedWords[currentStep][i])) {\n              keyState = KEY_STATE.PRESENT;\n            } else {\n              keyState = KEY_STATE.ABSENT;\n            }\n            let statesNew = gameData.states\n            let selectedLettersNew = gameData.selectedLetters\n            statesNew[currentStep][i] = keyState;\n            selectedLettersNew.push({\n              letter: gameData.guessedWords[currentStep][i],\n              state: keyState,\n            });\n            updateGameData({...gameData, states:statesNew, selectedLetters:selectedLettersNew})\n          }\n          if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n            updateGameData({...gameData, gameOver:true})\n          }\n          if (gameData.guessedWords[currentStep].join(\"\") === word) {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            refreshMessage(MESSAGE.CORRECT);\n            updateGameData({...gameData, gameOver:true})\n            setCookie(\"gameOver\", 1);\n          } else {\n            animations[currentStep].fill(ANIMATIONS.SCALE_CENTER);\n            setAnimations(animations);\n            const nextTry = currentStep + 1;\n            updateGameData({...gameData, currentStep:nextTry})\n            setNumber(0);\n            if (currentStep === SETTING.COUNT_OF_TRY - 1) {\n              refreshMessage(word, 3000);\n              setCookie(\"gameOver\", 1);\n            } else {\n              refreshMessage(MESSAGE.INCORRECT);\n              setCookie(\"currentStep\", nextTry);\n              setCookie(\"number\", 0);\n              setCookie(\"gameOver\", 0);\n            }\n          }\n          setCookie(\"states\", JSON.stringify(gameData.states));\n          setCookie(\"guessedWords\", JSON.stringify(gameData.guessedWords));\n          setCookie(\"selectedLetters\", JSON.stringify(gameData.selectedLetters));\n          setCookie(\"animations\", JSON.stringify(animations));\n          setCookie(\"index\", index);\n        } else {\n          refreshMessage(MESSAGE.NOT_EXIST);\n        }\n      }\n    }\n  };\n\n  const pressBackspace = () => {\n    if (number > 0 && !gameOver) {\n      let statesNew = gameData.states;\n      let guessedWordsNew = gameData.guessedWords;\n      statesNew[currentStep][number - 1] = KEY_STATE.EMPTY;\n      guessedWordsNew[currentStep][number - 1] = null;\n      updateGameData({...gameData,states:statesNew,guessedWords:guessedWordsNew })\n      setNumber(number - 1);\n    }\n  };\n\n  const onKeyPressed = (event: IKeyBoardEvent) => {\n    if (!gameOver) {\n      if (isValidChar(event)) {\n        pressLetter(event);\n      } else if (event.keyCode === KEYBOARD.BACKSPACE) {\n        pressBackspace();\n      } else if (event.keyCode === KEYBOARD.ENTER) {\n        pressEnter();\n      }\n    } else {\n      refreshMessage(MESSAGE.FINISH_GAME);\n    }\n  };\n\n  return {\n    onKeyPressed,\n    pressEnter,\n    pressLetter,\n    pressBackspace,\n    animations,\n    tryStates,\n    message\n  };\n};\nexport default useGameRowHook;\n"]},"metadata":{},"sourceType":"module"}